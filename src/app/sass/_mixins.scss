@import '_variables';
//For self-made functions 
@mixin backImage($image, $height: 100vh, $bgPos: center center) {
    background: linear-gradient( to bottom, rgba(0, 0, 0, 0), rgba(0, 0, 0, .6)), url($image);
    background-repeat: no-repeat;
    background-position: $bgPos;
    background-size: cover;
    height: $height;
}

// $qty is for how many item you want to have in a row
// $margin is the margin for column & row 
// etc. @include imageGrid(5, 1%);
@mixin imageGrid($qty, $margin) {
    width: ((100% - (($qty - 1) * $margin)) / $qty);
    // The every child element will have these values
    &:nth-child(n) {
        margin-right: $margin;
        margin-bottom: $margin;
    }
    // #{} this if when you insert a parameter
    // The last one of the child element will have these values
    &:nth-child(#{$qty}n) {
        margin-right: 0;
        margin-bottom: 0;
    }
}

@mixin clearfix {
    &:before,
    &:after {
        content: '';
        display: table;
    }
    &:after {
        clear: both;
    }
}

// This is for the screen sizing function 
// The ... allows the arguments to accept multiple numbers
@mixin break($length...) {
    @if length($length)==1 {
        @media (min-width: nth($length, 1)) {
            @content;
        }
    }
    @if length($length)==2 {
        @media (min-width: nth($length, 1)) and (max-width: nth($args, 2)) {
            @content;
        }
    }
}


/*
 * CONTENT SECTIONS
 */

@mixin transparent-card-with-shadow( $width: auto, $height: auto, $padding: 20px 40px, $mobilePadding: 40px 30px, $margin: 30px) {
    width: $width;
    height: $height;
    background-color: rgba(255, 255, 255, 0.5);
    box-shadow: 4px 4px 5px rgba(0, 0, 0, 0.7);
    padding: $padding;
    margin: $margin;
    box-sizing: border-box;
    @include media(mobile-screen) {
        padding: $mobilePadding;
    }
}

@mixin card-top-title( $titlePosition: else, $width: 250px, $height: 50px, $margin: 0, $horizontalPadding: 0, $verticalPadding: 0, $font-size: 14px, $color: black, $background-color: grey, $box-shadow: 4px 4px 5px rgba(50, 50, 50, 1), $font-weight: normal, $text-transform: uppercase) {
    position: absolute;
    width: $width;
    height: $height;
    margin: $margin;
    display: flex;
    justify-content: center;
    align-items: center;
    text-align: center;
    font-size: $font-size;
    color: $color;
    background-color: $background-color;
    box-shadow: $box-shadow;
    padding: $verticalPadding $horizontalPadding;
    font-weight: $font-weight;
    text-transform: $text-transform;
    @include media(mobile-screen) {
        $adjustedWidth: $width * 2 / 3;
        $adjustedHeight: $height * 4 / 5;
        width: $adjustedWidth;
        height: $adjustedHeight;
        @if $titlePosition==center {
            transform: translate(-$adjustedWidth / 2 - $horizontalPadding, -$adjustedHeight / 2);
        }
    }
    @if $titlePosition==center {
        top: 0;
        left: 50%;
        transform: translate(-$width / 2 - $horizontalPadding, -$height / 2);
    }
}


/* 
 * COMMON ELEMENTS
 */

@mixin banner( $width: 100%, $height: auto, $verticalMargin: 0, $horizontalMargin: 10vw, $box-shadow: 0 5px 10px rgb(50, 50, 50), $background-image: none, $background-position: center, $background-size: 100% 100%, $padding: none, $horizontalPadding: 0, $verticalPadding: 0) {
    width: $width;
    height: $height;
    margin: $verticalMargin $horizontalMargin;
    box-shadow: $box-shadow;
    @if $background-image !=none {
        background-image: $background-image;
        background-position: $background-position;
        background-size: $background-size;
    }
    @else {
        background-color: rgb(200, 200, 200);
    }
    @if $padding !=none {
        padding: $padding;
    }
    @else {
        padding: $verticalPadding $horizontalPadding;
    }
}


/*
/ button for sourceStash
*/

@mixin button-modulr {
    cursor: pointer;
    margin-top: 4vh;
    padding: 1vh 1vw;
    border-radius: 20px;
    border: transparent solid 1px;
    font-size: 12pt;
    color: white;
    background: $theme-dark-blue;
    box-shadow: 2px 2px 10px #bbb;
    transition: 0.5s;
    &:hover {
        border: $theme-dark-blue solid 1px;
        color: $theme-dark-blue;
        background: white;
    }
    &:focus {
        outline: 0;
    }
    @include media(mobile-screen) {
        margin-top: 2vh;
        padding: 0.5vh 7vw;
    }
}

// button from other page
@mixin button( $cursor: pointer, $width: 10vw, $height: auto, $horizontalPadding: 2vw, $text-align: center, $display: flex, $align-items: center, $justify-content: center, $verticalPadding: 1.5vh, $padding: none, $background: #fff, $box-shadow: 1px 7px 30px $theme-blueberry, $color: $theme-white, $border-radius: 5px, $transition: 0.3s, $font-size: 1vw, $border: 0px solid black, $transition: 0.3s, $hover-background: lighten($theme-dark-grey, 5)) {
    cursor: $cursor;
    width: $width;
    display: $display;
    justify-content: $justify-content;
    align-items: $align-items;
    height: $height;
    background: $background;
    color: $color;
    box-shadow: $box-shadow;
    border-radius: $border-radius;
    text-align: $text-align;
    font-size: $font-size;
    border: $border;
    &:hover {
        background: $hover-background;
    }
    @if $padding !=none {
        padding: $padding;
    }
    @else {
        padding: $verticalPadding $horizontalPadding;
    }
}


/*
 * MEDIA QUERIES MIXINS - MOBILE FIRST
 * Arguments: retina, large, small, tablet
 */

@mixin media($type) {
    $tablet-size: "(min-width: 768px)";
    $small-screen-size: "(min-width: 1024px)";
    $large-screen-size: "(min-width: 1440px)";
    $retina-screen-size: "(min-width: 2500px)";
    @if $type==tablet {
        @media #{$tablet-size} {
            @content;
        }
    }
    @else if $type==small {
        @media #{$small-screen-size} {
            @content;
        }
    }
    @else if $type==large {
        @media #{$large-screen-size} {
            @content;
        }
    }
    @else if $type==retina {
        @media #{$retina-screen-size} {
            @content;
        }
    }
}


/*
 * COMMON ALIGNMENT STYLING
 */

@mixin column-center() {
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
}

@mixin column-left() {
    display: flex;
    flex-direction: column;
    align-items: flex-start;
    justify-content: center;
}

@mixin column-right() {
    display: flex;
    flex-direction: column;
    align-items: flex-end;
    justify-content: center;
}

@mixin row-center() {
    display: flex;
    flex-direction: row;
    align-items: center;
    justify-content: center;
    @include media(mobile-screen) {
        flex-direction: column;
    }
}

@mixin row-left() {
    display: flex;
    flex-direction: row;
    align-items: center;
    justify-content: flex-start;
    @include media(mobile-screen) {
        flex-direction: column;
    }
}

@mixin grid($column: none, $row: none) {
    @if $column !=none && $row==none {
        display: flex;
        flex-direction: row;
        justify-content: center;
        align-content: center;
        flex-wrap: wrap;
        // Align by the number of columns
        >.grid-item {
            width: 100 / $column - 2%;
        }
    }
    @else if $column==none && $row !=none {
        // Align by the number of rows
    }
    @else {
        // Not sure yet what to do here
    }
}


/*
 * COMMON EFFECTS
 */

@mixin transition-basic($speed: 0.3s) {
    transition: all $speed;
    &:hover {
        transition: all $speed;
    }
}